---
- stat:
    path: "{{ app_path }}/{{ app_dir }}"
  register: exist

- name: create "{{ app_path }}/{{ app_dir }}" directory
  file: dest="{{ app_path }}/{{ app_dir }}" state=directory 
  when: exist.stat.exists != True

- git: 
    repo: "{{ project_git_repo }}"
    dest: "{{ app_path }}/{{ app_dir }}"
    version: "{{ GIT_TAG }}"
    accept_hostkey: yes
    refspec: '+refs/heads/{{ GIT_TAG }}:refs/remotes/origin/{{ GIT_TAG }}'
    update: yes
    force: true
  when: build_type  == "build" 
  register: cloned

- stat:
    path: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
  register: deploy_exist

- name: Find out what the remote machine's mounts are
  slurp:
    src: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
  when: deploy_exist.stat.islnk is defined
  register: deploy_info

- name: Reverting Changes
  command: "git reset --hard {{ deploy_info.content | b64decode }}"
  args:
    chdir: "{{ app_path }}/{{ app_dir }}"
  when: 
    - build_type  == "revert"
    - deploy_exist.stat.islnk is defined

- find:
    paths: "{{ app_path }}/{{ app_dir }}/{{ scrips_dir }}"
    patterns: "*.sql"
  register: files_sql

- debug: msg="{{ files_sql.files }}"

- name: Execute mysql dump files
  mysql_db:
    login_host: "{{ db_host }}"
    login_password: "{{ db_pass }}"
    login_user: "{{ db_user }}"
    login_port: "{{ db_port }}"
    name: "{{ db_database }}"
    state: import
    target: "{{ item.path }}"
  with_items:
      - "{{ files_sql.files }}"
  register: mysql_query
#when: cloned.changed


- name: Print complete log list
  command: git log --pretty=oneline "{{ cloned.after }}..{{ cloned.before }}"
  args:
    chdir: "{{ app_path }}/{{ app_dir }}"
  when: 
    - build_type  == "build" 
  register: commits_list

- name: Ensure Deployment file exist
  copy:
    content: ""
    dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
    force: yes
    mode: 0666
  when: 
    - build_type  == "build" 
  

- name: Save Deployment Info
  lineinfile:
    dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
    line: "{{ item.line }}"
  with_items:
    - {line: '{{ cloned.before }}'}
  when: 
    - build_type  == "build" 
  


# - mail:
#     host: smtp.gmail.com
#     port: 465
#     username: atul.agrawal@varaunited.com
#     password: Atul@9911
#     from: Atul Agrawal <atul.agrawal@varaunited.com>
#     to: Atul Agrawal <atul.agrawal@varaunited.com>
#     subject: Deployment Status
#     body: 'Your deployment has been successfully done.Commits Deployed List<p>{{ commits_list.stdout_lines }}</p>'
#   when: 
#     - build_type  == "build" 
#   delegate_to: "{{ HOST }}"

# - mail:
#     host: smtp.gmail.com
#     port: 465
#     username: atul.agrawal@varaunited.com
#     password: Atul@9911
#     from: Atul Agrawal <atul.agrawal@varaunited.com>
#     to: Atul Agrawal <atul.agrawal@varaunited.com>
#     subject: Deployment Status
#     body: 'Your changes has been reverted'
#   when: 
#     - build_type  == "revert" 
#   delegate_to: "{{ HOST }}"


- debug: msg="{{ commits_list.stdout_lines }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ GIT_TAG }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ cloned }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ commits_list }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ mysql_query }}" 
  







   
  
