- hosts: "{{ HOST }}"
  gather_facts: false

  tasks:
    - win_file:
        path: "{{ app_path }}"
        state: directory
      register: exist

    - win_stat:
        path: "{{ app_path }}/{{ app_dir }}"
      register: path

    - name: Get commit_id before Pull and Build
      win_shell: "git rev-parse HEAD"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      when: 
        - path.stat.exists == true
      register: commit_before
    
    - name: Clone Repository
      win_shell: "git clone -b {{ GIT_TAG }} {{ project_git_repo }}"
      args:
        chdir: "{{ app_path }}"
      when: 
        - path.stat.exists == false
        - build_type  == "build" 
      register: cloned

    - name: Fetch all  the git tags
      win_shell: "git fetch --all"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      when: 
        - path.stat.exists == true
        - build_type  == "build" 
      register: cloned

    - name: Checkout to the branch 
      win_shell: "git checkout {{ GIT_TAG }}"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      when: 
        - build_type  == "build" 
      register: cloned

    - name: Pull Changes if Repository Exist
      win_shell: "git pull origin {{ GIT_TAG }}"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      when: 
        - path.stat.exists == true
        - build_type  == "build"
      register: cloned

    - win_stat:
        path: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
      register: deploy_exist

    - name: Find out what the remote machine's mounts are
      slurp:
        src: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
      when: deploy_exist.stat.islnk is defined
      register: deploy_info

    - name: Reverting Changes
      command: "git reset --hard {{ deploy_info.content | b64decode }}"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      when: 
        - build_type  == "revert"
        - deploy_exist.stat.islnk is defined

    - win_find:
        paths: "{{ app_path }}/{{ app_dir }}/{{ scrips_dir }}"
        patterns: "*.sql"
      register: files_sql

    - debug: msg="{{ files_sql }}"
      

    - name: Execute mysql dump files
      win_shell: "cmd /c --% mysql -h {{ db_host }} -u{{ db_user }} -p{{ db_pass }} -P{{ db_port }} --max_allowed_packet=1073741824  {{ db_database }} < {{ item.path }}"
      with_items:
          - "{{ files_sql.files }}"
      register: mysql_query
      #when: cloned.changed

    - debug: msg="{{ mysql_query }}"

    - name: Ensure Deployment file exist
      win_file:
        dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
        state: touch
      when: 
        - path.stat.exists == true
        - build_type  == "build" 
        
    - name: Print commit_id after pull
      win_shell: "git rev-parse HEAD"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      register: deploy_info

    - name: Save Deployment Info
      win_lineinfile:
        path: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
        line: "{{ item.line }}"
      with_items:
        - {line: '{{ commit_before.stdout_lines }}'}
      when: 
        - deploy_exist.stat.exists == true
        - build_type  == "build" 

    
    - mail:
        host: smtp.gmail.com
        port: 465
        username: atul.agrawal@varaunited.com
        password: Atul@9911
        from: Atul Agrawal <atul.agrawal@varaunited.com>
        to: Atul Agrawal <atul.agrawal@varaunited.com>
        subject: Deployment Status
        body: 'Your deployment has been successfully done.'
      when: 
        - build_type  == "build" 
      delegate_to: localhost

    - mail:
        host: smtp.gmail.com
        port: 465
        username: atul.agrawal@varaunited.com
        password: Atul@9911
        from: Atul Agrawal <atul.agrawal@varaunited.com>
        to: Atul Agrawal <atul.agrawal@varaunited.com>
        subject: Deployment Status
        body: 'Your changes has been reverted'
      when: 
        - build_type  == "revert" 
      delegate_to: localhost
    
    - debug: msg="{{ cloned }}"
    - debug: msg="{{ deploy_info }}"
    - debug: msg="{{ exist }}"
      when: 
        - build_type  == "build" 






         
        
  