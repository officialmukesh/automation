---

- name: Include variables
  include_vars:
    file: main.yml
    name: usr_path

- stat:
    path: "{{ app_path }}/{{ app_dir }}"
  register: exist

- name: create "{{ app_path }}/{{ app_dir }}" directory
  file: dest={{ app_path }}/{{ app_dir }} state=directory 
  when: exist.stat.exists != True

- git: 
    repo: "{{ project_git_repo }}"
    dest: "{{ app_path }}/{{ app_dir }}"
    version: "{{ GIT_TAG }}"
    refspec: '+refs/heads/{{ GIT_TAG }}:refs/remotes/origin/{{ GIT_TAG }}'
    accept_hostkey: yes
    update: yes
    force: true
  when: build_type  == "build" 
  register: cloned

- stat:
    path: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
  register: deploy_exist

- name: Find out revert info
  slurp:
    src: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
  when: deploy_exist.stat.islnk is defined
  register: deploy_info

- name: Reverting Changes
  command: "git reset --hard {{ deploy_info.content | b64decode }}"
  args:
    chdir: "{{ app_path }}/{{ app_dir }}"
  when: 
    - build_type  == "revert"
    - deploy_exist.stat.islnk is defined

- name: Execute the npm install 
  command: npm install
  ignore_errors: true
  args:
    chdir: "{{ app_path }}/{{ app_dir }}" 
  register: npm_install


- name: start application with pm2 
  command: "pm2 start ecosystem.config.js"
  args:
    chdir: "{{ app_path }}/{{ app_dir }}" 
  register: pm2_restart
  
- name: Ensure Deployment file exist
  copy:
    content: ""
    dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
    force: yes
    mode: 0666
  when: 
    - build_type  == "build" 
    
- name: Save Deployment Info
  lineinfile:
    dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.txt"
    line: "{{ item.line }}"
  with_items:
    - {line: '{{ cloned.before }}'}
  when: 
    - build_type  == "build"
    - deploy_exist.stat.islnk is defined
    - cloned.before is defined
    - cloned.after is defined
    - cloned.before != cloned.after     


- debug: msg="{{ commits_list.stdout_lines }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ GIT_TAG }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ cloned }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ commits_list }}"
  when: 
    - build_type  == "build"
- debug: msg="{{ npm_install.stdout }}"
- debug: msg="{{ npm_install.stderr }}"
- debug: msg="{{ pm2_restart.stdout }}"
    







     
    
